
静态代理、动态代理、cglib对比

Java三种代理模式：静态代理、动态代理和cglib代理
https://segmentfault.com/a/1190000011291179

不管哪种代理模式，都是通过代理对象访问目标对象

1.静态代理实现较简单，只要代理对象对目标对象进行包装，即可实现增强功能，但静态代理只能为一个目标对象服务，如果目标对象过多，则会产生很多代理类。

2.JDK动态代理需要目标对象实现业务接口，代理类只需实现InvocationHandler接口。

3.动态代理生成的类为 lass com.sun.proxy.$Proxy4，cglib代理生成的类为class com.cglib.UserDao$$EnhancerByCGLIB$$552188b6。

4.静态代理在编译时产生class字节码文件，可以直接使用，效率高。

5.动态代理必须实现InvocationHandler接口，通过反射代理方法，比较消耗系统性能，但可以减少代理类的数量，使用更灵活。

6.cglib代理无需实现接口，通过生成类字节码实现代理，比反射稍快，不存在性能问题，但cglib会继承目标对象，需要重写方法，所以目标对象不能为final类。

JDK自带的Proxy+InvocationHandler
Cglib通过工具Enhancer创建代理对象，并实现MethodInterceptor接口


从JVM中dump出动态代理生成的class
https://segmentfault.com/a/1190000011608393

openjdk的jhsdb工具
https://cloud.tencent.com/developer/article/1407578

HSDB就是HotSpot Debugger的简称
sa-jdi.jar中的sa的全称为Serviceability Agent，它之前是sun公司提供的一个用于协助调试HotSpot的组件，而HSDB便是使用Serviceability Agent来实现的